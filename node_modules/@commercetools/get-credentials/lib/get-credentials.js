'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.setCredentialsFromEnvFile = setCredentialsFromEnvFile;
exports.getCredentialsFromEnvironment = getCredentialsFromEnvironment;
exports.default = getCredentials;

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _package = require('../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function setCredentialsFromEnvFile() {
  var currentDirectoryResult = _dotenv2.default.config({
    path: _path2.default.resolve('.ct-credentials.env')
  });
  var etcDirectoryResult = _dotenv2.default.config({
    path: _path2.default.resolve(_path2.default.join('/etc', '.ct-credentials.env'))
  });

  return _extends({}, currentDirectoryResult.parsed, etcDirectoryResult.parsed);
}

function getCredentialsFromEnvironment(projectKey) {
  return new Promise(function (resolve, reject) {
    var envKey = `CT_${projectKey.toUpperCase().replace(/-/g, '_')}`;
    var envValue = process.env[envKey] || '';

    if (!envValue) return reject(new Error(`Could not find environment variable ${envKey}
        see ${_package.homepage}#usage`));

    if (!envValue.match(/\w+:\w+/)) return reject(new Error(`Could not get credentials from value '${envValue}' in ${envKey}
        see ${_package.homepage}#usage`));

    var _envValue$split = envValue.split(':'),
        _envValue$split2 = _slicedToArray(_envValue$split, 2),
        clientId = _envValue$split2[0],
        clientSecret = _envValue$split2[1];

    return resolve({
      clientId,
      clientSecret
    });
  });
}

function getCredentials(projectKey) {
  if (!projectKey) return Promise.reject(new Error('Missing "projectKey" argument'));

  return Promise.resolve(setCredentialsFromEnvFile()).then(function () {
    return getCredentialsFromEnvironment(projectKey);
  }).catch(function (environmentError) {
    return Promise.reject(environmentError);
  });
}